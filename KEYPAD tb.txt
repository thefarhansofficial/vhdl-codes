--------------------------------------------------------------------------------
-- Company: 
-- Engineer:
--
-- Create Date:    17/10/2013
-- Design Name:   
-- Module Name:   D:/Xilinx ISE Design Suite 13.1 Windows/bin/keypad4x4/keupad4x4tb.vhd
-- Project Name:  keypad4x4
-- Target Device:  
-- Tool versions:  
-- Description:   
-- 
-- VHDL Test Bench Created by ISE for module: keypad4x4
-- 
-- Dependencies:
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Notes: 
-- This testbench has been automatically generated using types std_logic and
-- std_logic_vector for the ports of the unit under test.  Xilinx recommends
-- that these types always be used for the top-level I/O of a design in order
-- to guarantee that the testbench will bind correctly to the post-implementation 
-- simulation model.
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY keupad4x4tb IS
END keupad4x4tb;
 
ARCHITECTURE behavior OF keupad4x4tb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT keypad4x4
    PORT(
         rows : IN  std_logic_vector(3 downto 0);
         column : IN  std_logic_vector(3 downto 0);
         dout : OUT  std_logic_vector(7 downto 0)
        );
    END COMPONENT;
    

   --Inputs
   signal rows : std_logic_vector(3 downto 0) := (others => '0');
   signal column : std_logic_vector(3 downto 0) := (others => '0');

 	--Outputs
   signal dout : std_logic_vector(7 downto 0);
   -- No clocks detected in port list. Replace <clock> below with 
   -- appropriate port name 
 
   --constant <clock>_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: keypad4x4 PORT MAP (
          rows => rows,
          column => column,
          dout => dout
        );

   -- Clock process definitions
 --  <clock>_process :process
 --  begin
--		<clock> <= '0';
	--	wait for <clock>_period/2;
--		<clock> <= '1';
	--	wait for <clock>_period/2;
 --  end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
		rows<="0001";
		column<="0001";
      wait for 100 ns;	
		
		rows<="0001";
		column<="0010";
      wait for 100 ns;
		
		rows<="0001";
		column<="0100";
      wait for 100 ns;
		
		rows<="0001";
		column<="1000";
      wait for 100 ns;
		
		--for second row
		
		rows<="0010";
		column<="0001";
      wait for 100 ns;	
		
		rows<="0010";
		column<="0010";
      wait for 100 ns;
		
		rows<="0010";
		column<="0100";
      wait for 100 ns;
		
		rows<="0010";
		column<="1000";
      wait for 100 ns;
		
		--for third row
		
		rows<="0100";
		column<="0001";
      wait for 100 ns;	
		
		rows<="0100";
		column<="0010";
      wait for 100 ns;
		
		rows<="0100";
		column<="0100";
      wait for 100 ns;
		
		rows<="0100";
		column<="1000";
      wait for 100 ns;
		
		--for forth row;
		
		rows<="1000";
		column<="0001";
      wait for 100 ns;	
		
		rows<="1000";
		column<="0010";
      wait for 100 ns;
		
		rows<="1000";
		column<="0100";
      wait for 100 ns;
		
		rows<="1000";
		column<="1000";
      wait for 100 ns;
		

      --wait for <clock>_period*10;

      -- insert stimulus here 

      wait;
   end process;

END;
